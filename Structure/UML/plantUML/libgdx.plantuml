@startuml

title __LIBGDX's Class Diagram__\n

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.CharacterCustomizer {
          {static} + generatePlayerTexture()
          {static} + loadCharacterConfigFromFile()
          {static} + saveCharacterConfigToFile()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.Game {
          {static} + BOARD_X : int
          {static} + BOARD_Y : int
          + create()
          + dispose()
          + pause()
          + render()
          + resize()
          + resume()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.Map {
          + beltLayer : BeltInformation[][]
          + flagList : List<Flag>
          + gearLayer : int[][]
          + holeLayer : boolean[][]
          + laserLayer : int[][][]
          + laserShooters : List<LaserShooter>
          + playerLayer : PlayerRenderInformation[][]
          + repairLayer : boolean[][]
          + spawnPoints : List<GridPoint2>
          + wallLayer : boolean[][][]
          - BOARD_X : int
          - BOARD_Y : int
          - ID : int
          + Map()
          + canGo()
          + clearLasers()
          + clearPlayerLayer()
          + hasPlayer()
          + hasWon()
          + isGear()
          + isHole()
          {static} + isInBounds()
          {static} + isInBounds()
          + isRepair()
          + loadPlayers()
          + registerFlags()
          + setID()
          + shootLasers()
          + wouldDie()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.Map.BeltInformation {
          + beltRotation : int
          + isExpress : boolean
          + BeltInformation()
          + BeltInformation()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.Map.LaserShooter {
          ~ isPermanent : boolean
          ~ laserNum : int
          ~ x : int
          ~ y : int
          + LaserShooter()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.Map.PlayerRenderInformation {
          + PlayerRenderInformation()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.NetworkDataWrapper {
          + PlayerTokens : List<PlayerToken>
          + laserLayer : int[][][]
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.PlayerConfig {
          ~ image : String
          ~ mainColor : Color
          ~ name : String
          + PlayerConfig()
          + PlayerConfig()
          + getImage()
          + getMainColor()
          + getName()
          + setImage()
          + setMainColor()
          + setName()
      }
    }
  }
  

  namespace inf112.skeleton.app {
    namespace libgdx {
      class inf112.skeleton.app.libgdx.RoboGame {
          {static} + BOARD_X : int
          {static} + BOARD_Y : int
          + batch : SpriteBatch
          + buttonPressSound : Sound
          + font : BitmapFont
          + gameMusic : Music
          + menuMusic : Music
          + renderer : OrthogonalTiledMapRenderer
          + skin : Skin
          + tiledMap : TiledMap
          + create()
          + dispose()
          + loadTileMapFromFile()
          + render()
          + startGameMusic()
          + startMenuMusic()
          + stopGameMusic()
          + stopMenuMusic()
          - initializeRendering()
      }
    }
  }
  

  inf112.skeleton.app.libgdx.Game .up.|> com.badlogic.gdx.ApplicationListener
  inf112.skeleton.app.libgdx.Game -up-|> com.badlogic.gdx.InputAdapter
  inf112.skeleton.app.libgdx.Map +-down- inf112.skeleton.app.libgdx.Map.BeltInformation
  inf112.skeleton.app.libgdx.Map +-down- inf112.skeleton.app.libgdx.Map.LaserShooter
  inf112.skeleton.app.libgdx.Map +-down- inf112.skeleton.app.libgdx.Map.PlayerRenderInformation
  inf112.skeleton.app.libgdx.Map.BeltInformation o-- inf112.skeleton.app.game.objects.Direction : beltDirection
  inf112.skeleton.app.libgdx.Map.BeltInformation o-- inf112.skeleton.app.game.objects.Direction : beltRotationDirection
  inf112.skeleton.app.libgdx.Map.LaserShooter o-- inf112.skeleton.app.game.objects.Direction : dir
  inf112.skeleton.app.libgdx.Map.PlayerRenderInformation o-- inf112.skeleton.app.libgdx.PlayerConfig : config
  inf112.skeleton.app.libgdx.Map.PlayerRenderInformation o-- inf112.skeleton.app.game.objects.Direction : dir
  inf112.skeleton.app.libgdx.Map.PlayerRenderInformation o-- inf112.skeleton.app.game.objects.PlayerToken.CHARACTER_STATES : state
  inf112.skeleton.app.libgdx.RoboGame -up-|> com.badlogic.gdx.Game


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
